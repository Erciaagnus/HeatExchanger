#!/usr/bin/env python3
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import differential_evolution
import math


#Conductivity
def conductivity(T, x):
    A1 = -1407.53 + 11.0513 * T - 1.46741e-2 * T**2
    A2 = 38.9855 - 0.240475 * T + 3.48073e-4 * T**2
    A3 = -0.265025 + 1.51915e-3 * T - 2.32262e-6 * T**2
    return (A1 + A2 * x + A3 * x**2) * 0.001
#Viscosity
def viscosity(T, x):
    A1 = -494.122 + 16.3967 * x - 0.14511 * x**2
    A2 = 28606.4 - 934.568 * x + 8.52755 * x**2
    A3 = 70.3848 - 2.35014 * x + 0.0207809 * x**2
    return np.exp(A1 + A2 / T + A3 * np.log(T)) * 0.001
#Density [kg/m^3]
def density(T, x):
    return (
        (10976.3 + 0.71244 * x + 2.21446 * x**2) * 1e-1 +
        (6796.2 - 148.247 * x - 0.896962 * x**2) * 1e-4 * T +
        (-350.97 - 324.312 * x + 4.97020 * x**2) * 1e-7 * T**2
    )
#specific heat [KJ/Kg*K] But input T=Celcius input
def specific_heat(T, x):
    T_celsius = T
    return (
        (-0.26642 + 10.97101 * x - 12.7661 * x**2) +
        (0.02502 - 0.08334 * x + 0.07541 * x**2) * T_celsius
    )
def calc_FB(R, D_bi, N_s):
    """1.6: FB = (1 - R) * π * D_bi / N_s"""
    return (1 - R) * np.pi * D_bi / N_s

def calc_D_vi(D_bi, N_s, D_ei, FB):
    """1.7: D_vi = sqrt(D_bi^2 + N_s * (D_ei - D_bi) * FB / π)"""
    # D_bi = m, FB = m
    return np.sqrt(D_bi**2 + (N_s * (D_ei - D_bi) * FB) / np.pi)

def calc_D_vo(D_vi, T_w):
    # T_w = m, D_vi -> m
    """1.8: D_vo = D_vi + 2 * T_w"""
    return D_vi + 2 * T_w

def calc_theta_deg(D_vo, N_s, p):
    """1.9: θ = arctan(π * D_vo / (N_s * p)), in degrees"""
    theta_rad = np.arctan((np.pi * D_vo) / (N_s * p))
    return np.degrees(theta_rad)


def calc_flute_height(D_eo, D_bi, T_w):
    """1.10: e = (D_eo - (D_bi + 2 * T_w)) / 2"""
    return (D_eo - (D_bi + 2 * T_w)) / 2

# Input condition
mh_dot = 3.0
mc_dot = 2.5
T_hi = 80 + 273.15 # K
T_ho = 55 + 273.15 # K
T_ci = 45 + 273.15 # K
x_h = 0.62
x_c = 0.57

# 평균 물성 온도
T_h_avg = (T_hi + T_ho) / 2 # K
T_c_avg = (T_ci + 72.135+273.15) / 2 # K

T_h = np.linspace(80 + 273.15, 55 + 273.15, 100 + 1)
T_c = [0]*101
T_c[0] = T_ci
T_h[0] = T_hi

# initialize
Cp_h = specific_heat(T_h_avg, x_h)
Cp_c = specific_heat(T_c_avg, x_c)
T_c[1] = 0.25*mh_dot*Cp_h/(mc_dot*Cp_c)+T_ci

delta_T1_initial = T_h[1]-T_c[1]
delta_T2_initial = T_h[0]-T_c[0]
initial_LMTD = ( delta_T1_initial- delta_T2_initial)/np.log(delta_T1_initial/delta_T2_initial)

R = 0.6
T_w = 0.5 /1000 # [mm] -> [m]
k_wall = 401 #[W/(m*K)]
N_seg = 100
"""
D_eo = D_si
Optimization Tool
Constraints

    D_si < 200mm
    D_eo-D_bi > 2.0mm
    D_bi > 24mm
    s <= N_s <= 6
    1 <= Pitch <= 1000 [mm]

Parameter
    N_s, D_eo,D_bi,D_si,Pitch
"""
def calculate_nusselt_number(f_f, Re, Pr, e_star, p_star, r_star):
    """
    Nusselt number 계산 함수

    Parameters:
    - f_f: Darcy 마찰계수
    - Re: Reynolds 수 (800 ~ 40000)
    - Pr: Prandtl 수
    - e_star: 비정상성 높이 비율
    - p_star: 피치 비율
    - r_star: 반지름 비율

    Returns:
    - Nu: Nusselt 수
    """

    # 수식 1: 앞의 전통적 Nusselt 계산식
    term1_numerator = (f_f / 8) * Re * Pr
    term1_denominator = 1 + 9.77 * ((f_f / 8) ** 0.5) * (Pr ** (2/3) - 1)
    term1 = term1_numerator / term1_denominator

    # 수식 2: 형상 보정 인자
    geometric_term = (Re ** -0.20) * (e_star ** -0.32) * (p_star ** -0.28) * (r_star ** -1.64)

    # 전체 Nusselt 수
    Nu = term1 * geometric_term
    return Nu

def friction_factor(Re, r_star, e_star, theta_deg=None):
    """
    Darcy 마찰계수 f_f 계산기

    Parameters:
    - Re        : Reynolds number
    - r_star    : 형상 비 (r*)
    - e_star    : flute height 비율 (e*)
    - theta_deg : flute helix angle in degrees (Re <= 800일 경우에만 필요)

    Returns:
    - f_f       : 마찰 계수
    """

    if Re <= 800:
        if theta_deg is None:
            raise ValueError("Re <= 800일 때는 theta (deg)를 반드시 입력해야 합니다.")

        theta_rad = np.radians(theta_deg)  # degree -> radian 변환

        # laminar 영역 수식
        term1 = 96 * r_star ** 0.035 / Re
        term2 = 1 + 101.7 * Re ** 0.52 * e_star ** (1.65 + 2.0 * theta_rad) * r_star ** 5.77
        f_f = term1 * term2

    elif Re <= 40000:
        # turbulent 영역 수식
        ln_Re = np.log(Re)
        denominator = 1.964 * ln_Re - 3.8215
        log_term = np.log(Re / denominator)
        core = 1.7372 * log_term
        f_f = 4 * (core ** -2) * (1 + 0.0925 * r_star) * e_star

    else:
        raise ValueError("Re는 40000 이하이어야 합니다.")

    return f_f

def segment_based_length_safe(D_si, D_bi, D_eo, N_s, Pitch, T_c_init):
    D_si_m = D_si / 1000 # mm->m
    D_bi_m = D_bi /1000 # mm->m
    D_eo_m = D_eo /1000 # mm->m
    Pitch_m = Pitch /1000 # mm->m
    D_ei = D_eo/1000 - 2*T_w # m

    A_tube = (np.pi * (D_si_m)**2 / 4) # m
    A_annular = (np.pi/4) * (D_eo_m**2 - D_bi_m**2) # m

    #4 Calculate the initial segment LMTD
    FB = calc_FB(R, D_bi_m, N_s) # m
    D_vi_m = calc_D_vi(D_bi_m, N_s, D_ei, FB) #  m
    D_vo_m = calc_D_vo(D_vi_m, T_w) # m
    D_hyd = D_si_m - D_vo_m # m
    A_wall = N_s * np.pi * D_bi_m * Pitch_m
    L_segment_total = 0
    T_c = np.zeros(N_seg + 1)
    T_c[0] = T_c_init # K
    p = Pitch_m # m
    theta = calc_theta_deg(D_vo_m, N_s, Pitch_m) #m # Pitch
    e = calc_flute_height(D_eo_m, D_vi_m, T_w) #m, m ,m
    e_star_t = e/D_vi_m # m / m
    p_star_t = p/D_vi_m # m / m
    theta_star_t = theta / 90
    e_star_a = e/D_vo_m # m / m
    p_star_a = p/D_vo_m # m / m
    theta_star_a = theta / 90
    r_star_a = D_vo_m / D_si_m # m / m
    # print(f"r_star{r_star_a}, e_star_a{e_star_a}, e_star_t{e_star_t}, Pitch{Pitch}")
    for i in range(N_seg):
        # Calculate the Property of fluid
        delta_T1 = T_h[i+1] - T_c[i]
        delta_T2 = T_h[i] - T_c[i]
        if delta_T1 <= 0 or delta_T2 <= 0 or np.isclose(delta_T1, delta_T2):
            LMTD = abs((delta_T1 + delta_T2) / 2)
        else:
            LMTD = (delta_T1 - delta_T2) / np.log(delta_T1 / delta_T2)
        T_h_avg_i = (T_h[i] + T_h[i+1]) / 2
        T_c_avg_i = (T_c[i] + T_c[i]) / 2
        # hot fluid
        rho_h = density(T_h_avg_i, x_h) # W/mK
        mu_h = viscosity(T_h_avg_i, x_h) # kg/ms
        k_h = conductivity(T_h_avg_i, x_h) # kg/m^3
        Cp_h_val = specific_heat(T_h_avg - 273.15, x_h) * 1000

        # Cold fluid
        rho_c = density(T_c_avg_i, x_c) # W/mK
        mu_c = viscosity(T_c_avg_i, x_c) # kg/ms
        k_c = conductivity(T_c_avg_i, x_c) # kg/m^3
        Cp_c_val = specific_heat(T_c_avg - 273.15, x_c) * 1000

        # Velocity
        V_tube = mh_dot / (rho_h * A_tube)
        V_annular = mc_dot / (rho_c * A_annular)

        #5 calculate Re_t, Re_a
        Re_tube = rho_h * V_tube * D_vi_m / mu_h
        Re_annular = rho_c * V_annular * D_hyd / mu_c
        Pr_tube = Cp_h_val * mu_h / k_h
        Pr_annular = Cp_c_val * mu_c / k_c
        if Re_tube >= 500 and Re_tube <= 5000:
            Nu_tube = 0.014*Re_tube**0.842*e_star_t**(-0.067)*p_star_t**(-0.705)*Pr_tube**0.4
        elif Re_tube >5000 and Re_tube <= 8000:
            Nu_tube = 0.064*Re_tube**0.773*e_star_t*(-0.242)*p_star_t**(-0.108)*theta_star_t**(-0.509)*Pr_tube**0.4
        else:
            Nu_tube = 0.023 * Re_tube**0.8 * Pr_tube**0.4  # Dittus-Boelter
        f_f = friction_factor(Re_annular, r_star_a, e_star_a, theta_deg=theta_star_a)
        Nu_annular = calculate_nusselt_number(f_f, Re_annular,Pr_annular, e_star_a, p_star_a, r_star_a)

        h_t = Nu_tube * k_h / D_vi_m
        h_a = Nu_annular * k_c / D_hyd

        U = 1 / ((1 / h_t) + D_vi_m / (2 * k_wall) * np.log(D_vo_m / D_vi_m) + (1 / h_a) * (D_vi_m / D_vo_m))
        # LMTD 계산



        # 열전달량 Q (양쪽 평균)
        Q1 = mh_dot * Cp_h_val * (T_h[i] - T_h[i+1])
        Q2 = mc_dot * Cp_c_val * (T_c[i+1] - T_c[i])
        Q = (Q1 + Q2) / 2

        # 열전달 면적 A
        A = Q / (U * LMTD)

        # 면적에서 길이 계산 (π·D_vi를 통한 전개)
        L_segment = A / (np.pi * D_vi_m)

        # 냉각수 출구온도 갱신 (Q2 이용)
        T_c[i+1] = T_c[i] + Q / (mc_dot * Cp_c_val)

        # 총 길이 누적
        L_segment_total += L_segment

    return L_segment_total, T_c

# 적합도 함수 정의 (열교환기 길이 + 제약조건 패널티)
def fitness(x):
    # NaN 또는 Inf 값 방어
    if np.any(np.isnan(x)) or np.any(np.isinf(x)):
        return 1e6

    try:
        D_si, D_bi, D_eo, N_s, Pitch = x
        if np.isnan(N_s):
            return 1e6
        N_s = int(round(N_s))  # flute 수는 정수
    except:
        return 1e6
    penalty = 0
    if D_si > 200:
        penalty += 1e6
    if D_eo - D_bi < 2:
        penalty += 1e6
    if D_bi <= 0.8 * D_si:
        penalty += 1e6
    if N_s < 2 or N_s > 6:
        penalty += 1e6
    if Pitch < 1 or Pitch > 1000:
        penalty += 1e6
    try:
        L_total, _ = segment_based_length_safe(D_si, D_bi, D_eo, N_s, Pitch, T_c_init=45+273.15)
    except Exception:
        return 1e6
    return L_total
# 변수 범위 설정: [D_si, D_bi, D_eo, N_s, Pitch]
bounds = [
    (10, 200),   # D_si
    (15, 400),   # D_bi
    (20, 500),   # D_eo
    (2, 6),      # N_s (정수)
    (1, 1000)    # Pitch
]

# 적합도 수렴 추적 리스트
fitness_history = []

# 콜백 함수: 각 세대의 최고 성능 기록
def callback(x, convergence):
    fitness_history.append(fitness(x))

# 유전 알고리즘 실행 (Differential Evolution 사용)
result = differential_evolution(
    fitness,
    bounds,
    strategy='best1bin',
    maxiter=1000,
    popsize=15,
    tol=1e-6,
    mutation=(0.5, 1),
    recombination=0.7,
    seed=42,
    callback=callback,
    polish=True,
    disp=True
)

# 결과 출력
opt_D_si, opt_D_bi, opt_D_eo, opt_N_s, opt_Pitch = result.x
opt_N_s = int(round(opt_N_s))
opt_L = fitness(result.x)

print("\n✅ 최적 설계 변수 결과:")
print(f"D_si (mm)   = {opt_D_si:.2f}")
print(f"D_bi (mm)   = {opt_D_bi:.2f}")
print(f"D_eo (mm)   = {opt_D_eo:.2f}")
print(f"N_s (개)    = {opt_N_s}")
print(f"Pitch (mm)  = {opt_Pitch:.2f}")
print(f"🔻 최소 열교환기 길이 L = {opt_L:.6f} m")

# 수렴 그래프 출력
plt.figure(figsize=(10, 5))
plt.plot(fitness_history, marker='o')
plt.title("Convergence of Heat Exchanger Length (Fitness Function)")
plt.xlabel("Generation")
plt.ylabel("Minimum Length (m)")
plt.grid(True)
plt.tight_layout()
plt.show()
